generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String       @id @default(uuid())
  userId    String       @unique
  email     String       @unique
  name      String
  image     String
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt
  profile   UserProfile?
}

model Poll {
  id       String   @id @default(uuid())
  postId   Int      @unique
  post     Post     @relation("PostPoll", fields: [postId], references: [id])
  question String
  options  String[]
}

model Post {
  id                  Int             @id @default(autoincrement())
  brief               String
  extendedDescription String
  likes               Int             @default(0)
  authorId            String
  author              UserProfile     @relation(fields: [authorId], references: [id])
  projectId           String? // Added: Optional link to a project
  project             ProjectProfile? @relation(fields: [projectId], references: [id])
  comments            Comment[]
  media               Media[]
  poll                Poll?           @relation("PostPoll")
  sharedMessages      Message[]       @relation("PostSharedMessages")
  actions             PostAction[]
  isEditorsChoice     Boolean         @default(false)
  createdAt           DateTime        @default(now())
  updatedAt           DateTime        @updatedAt
  Notification        Notification[]

  @@index([authorId]) // Added index for performance
  @@index([projectId]) // Added index for performance
}

model UserProfile {
  id                       String                    @id @default(uuid())
  userId                   String                    @unique
  user                     User                      @relation(fields: [userId], references: [userId])
  image                    String
  email                    String
  name                     String
  title                    String
  university               String
  bio                      String
  location                 String
  github                   String
  codeforces               String
  alias                    String?                   @unique
  following                Follow[]                  @relation("Follower")
  followers                Follow[]                  @relation("Followed")
  posts                    Post[]
  education                Degree[]
  experiences              Experience[]
  skills                   String[]
  projects                 ProjectProfile[]
  contributedProjects      ProjectProfile[]          @relation("ProjectContributors")
  ledProjects              ProjectProfile[]          @relation("ProjectLeadRelation")
  comments                 Comment[]
  replies                  Reply[]
  conversationParticipants ConversationParticipant[] @relation("UserProfileConversations")
  sentMessages             Message[]                 @relation("UserProfileSentMessages")
  postActions              PostAction[]
  projectFollowing         ProjectFollow[]           @relation("ProjectFollower")
  notificationsReceived    Notification[]            @relation("UserProfileNotificationsReceived")
  notificationsSent        Notification[]            @relation("UserProfileNotificationsSent")
}

model Comment {
  id           Int            @id @default(autoincrement())
  text         String
  likes        Int            @default(0)
  authorId     String
  author       UserProfile    @relation(fields: [authorId], references: [id])
  postId       Int
  post         Post           @relation(fields: [postId], references: [id])
  replies      Reply[]
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  Notification Notification[]

  @@index([authorId]) // Added index for performance
  @@index([postId]) // Added index for performance
}

model Reply {
  id           Int            @id @default(autoincrement())
  text         String
  likes        Int            @default(0)
  authorId     String
  author       UserProfile    @relation(fields: [authorId], references: [id])
  commentId    Int
  comment      Comment        @relation(fields: [commentId], references: [id])
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  Notification Notification[]

  @@index([authorId]) // Added index for performance
  @@index([commentId]) // Added index for performance
}

model Degree {
  id            String      @id @default(uuid())
  userProfileId String
  userProfile   UserProfile @relation(fields: [userProfileId], references: [id])
  degreeName    String
  institution   String
  startDate     DateTime
  endDate       DateTime?
  description   String

  @@index([userProfileId]) // Added index for performance
}

model Experience {
  id            String      @id @default(uuid())
  userProfileId String
  userProfile   UserProfile @relation(fields: [userProfileId], references: [id])
  title         String
  company       String
  startDate     DateTime
  endDate       DateTime?
  description   String

  @@index([userProfileId]) // Added index for performance
}

model ProjectFollow {
  followerId String
  projectId  String
  follower   UserProfile    @relation("ProjectFollower", fields: [followerId], references: [id])
  project    ProjectProfile @relation("ProjectFollowed", fields: [projectId], references: [id])

  @@id([followerId, projectId]) // Composite primary key
  @@index([followerId]) // Added index for performance
  @@index([projectId]) // Added index for performance
}

model ProjectProfile {
  id              String          @id @default(uuid())
  image           String?
  name            String
  projectLeadId   String
  projectLead     UserProfile     @relation("ProjectLeadRelation", fields: [projectLeadId], references: [id])
  brief           String
  description     String
  github          String?
  liveLink        String?
  techStack       String[]
  followers       ProjectFollow[] @relation("ProjectFollowed")
  startDate       DateTime
  endDate         DateTime?
  status          String
  tags            String[]
  media           Media[]
  ownerId         String
  owner           UserProfile     @relation(fields: [ownerId], references: [id])
  contributors    UserProfile[]   @relation("ProjectContributors")
  isEditorsChoice Boolean         @default(false)
  posts           Post[] // Added relation to posts
  Notification    Notification[]

  @@index([ownerId]) // Added index for performance
  @@index([projectLeadId]) // Added index for performance
}

model Follow {
  followerId String
  followedId String
  follower   UserProfile @relation("Follower", fields: [followerId], references: [id])
  followed   UserProfile @relation("Followed", fields: [followedId], references: [id])

  @@id([followerId, followedId]) // Composite primary key
  @@index([followerId]) // Added index for performance
  @@index([followedId]) // Added index for performance
}

model Media {
  id        String          @id @default(uuid())
  url       String
  type      MediaType
  altText   String?
  order     Int?
  post      Post?           @relation(fields: [postId], references: [id])
  postId    Int?
  project   ProjectProfile? @relation(fields: [projectId], references: [id])
  projectId String?
  createdAt DateTime        @default(now())
  updatedAt DateTime        @updatedAt

  @@index([postId]) // Added index for performance
  @@index([projectId]) // Added index for performance
}

enum MediaType {
  IMAGE
  VIDEO
  AUDIO
  GIF
}

//////////////////////////////////
// Messaging Models
//////////////////////////////////

enum ConversationType {
  ONE_ON_ONE
  GROUP
}

model Conversation {
  id           String                    @id @default(uuid())
  createdAt    DateTime                  @default(now())
  updatedAt    DateTime                  @updatedAt
  type         ConversationType          @default(ONE_ON_ONE)
  participants ConversationParticipant[]
  messages     Message[]
}

model ConversationParticipant {
  id             String       @id @default(uuid())
  conversation   Conversation @relation(fields: [conversationId], references: [id])
  conversationId String
  userProfile    UserProfile  @relation("UserProfileConversations", fields: [userId], references: [userId])
  userId         String
  lastReadAt     DateTime?

  @@unique([conversationId, userId])
  @@index([userId]) // Added index for performance
  @@index([conversationId]) // Added index for performance
}

enum MessageType {
  TEXT
  IMAGE
  VIDEO
  FILE
  POST_SHARE
}

model Message {
  id             String       @id @default(uuid())
  conversation   Conversation @relation(fields: [conversationId], references: [id])
  conversationId String
  sender         UserProfile  @relation("UserProfileSentMessages", fields: [senderId], references: [id])
  senderId       String
  type           MessageType  @default(TEXT)
  content        String?
  post           Post?        @relation("PostSharedMessages", fields: [postId], references: [id])
  postId         Int?
  mediaUrl       String?
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt

  @@index([conversationId]) // Added index for performance
  @@index([senderId]) // Added index for performance
}

enum PostActionType {
  LIKED
  SAVED
  COMMENTED
  SHARED
  REPOSTED
}

model PostAction {
  id            String         @id @default(uuid())
  userProfile   UserProfile    @relation(fields: [userProfileId], references: [id])
  userProfileId String
  post          Post           @relation(fields: [postId], references: [id])
  postId        Int
  actionType    PostActionType
  actionValue   String? // Added: Optional value for actions (e.g., comment text)
  createdAt     DateTime       @default(now())

  @@index([userProfileId]) // Added index for performance
  @@index([postId]) // Added index for performance
}

model Notification {
  id          String           @id @default(uuid())
  recipientId String
  recipient   UserProfile      @relation("UserProfileNotificationsReceived", fields: [recipientId], references: [id])
  senderId    String?
  sender      UserProfile?     @relation("UserProfileNotificationsSent", fields: [senderId], references: [id])
  type        NotificationType
  message     String
  postId      Int?
  post        Post?            @relation(fields: [postId], references: [id])
  commentId   Int?
  comment     Comment?         @relation(fields: [commentId], references: [id])
  replyId     Int?
  reply       Reply?           @relation(fields: [replyId], references: [id])
  projectId   String?
  project     ProjectProfile?  @relation(fields: [projectId], references: [id])
  isRead      Boolean          @default(false)
  createdAt   DateTime         @default(now())

  @@index([recipientId])
  @@index([senderId])
  @@index([postId])
  @@index([commentId])
  @@index([replyId])
  @@index([projectId])
}

enum NotificationType {
  FOLLOW
  POST_LIKE
  COMMENT_LIKE
  REPLY_LIKE
  POST_COMMENT
  COMMENT_REPLY
  MENTION
  PROJECT_INVITE
  PROJECT_UPDATE
  SYSTEM
}
